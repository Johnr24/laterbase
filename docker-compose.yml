# version tag is obsolete and removed

services:
  # --- Standby Replication Service ---
  standby:
    build:
      context: ./app # Updated context
      dockerfile: Dockerfile # Use the main Dockerfile (relative to context)
    container_name: standby
    env_file:
      - .env
    environment:
      # --- Required by setup_standby.sh ---
      PRIMARY_HOST: ${PRIMARY_HOST}
      REPL_PASSWORD: ${REPL_PASSWORD}
      # --- PostgreSQL Runtime Configuration (sourced from .env, with defaults) ---
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-laterbase_standby_db}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
      POSTGRES_PASSWORD: ${REPL_PASSWORD} # Required by base image entrypoint
      # --- Other Settings ---
      POSTGRES_INITDB_ARGS: "--no-sync" # Faster init, safe for initial setup
    volumes:
      - laterbase_standby_data:${PGDATA:-/var/lib/postgresql/data/pgdata}
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - network

  # --- Hourly Backup Agent Service (Executes pg_dump) ---
  backup-agent:
    build:
      context: ./backup
      dockerfile: Dockerfile.backup # Use the reverted backup Dockerfile
    container_name: backup_agent
    env_file:
      - .env
    environment:
      # Required by backup.sh:
      PRIMARY_HOST: ${PRIMARY_HOST}
      PGPASSWORD: ${REPL_PASSWORD} # backup.sh expects PGPASSWORD
      PRIMARY_DBS: ${PRIMARY_DBS:-YOUR_RESOLVE_DB_NAMES_HERE} # Add PRIMARY_DBS to .env!
      PRIMARY_PORT: ${PRIMARY_PORT:-5432}
      PRIMARY_USER: ${PRIMARY_USER:-postgres}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7} # Default 7 days for local .sql.gz files
    volumes:
      # Mount host directory for pg_dump files (destination for backup.sh)
      - ${LOCAL_BACKUP_PATH:-./backups}:/backups
    restart: unless-stopped
    labels:
      ofelia.enabled: "true"
      # Schedule backup script execution
      ofelia.job-exec.laterbase-backup.schedule: "@hourly" # Or use cron format e.g., "0 * * * *"
      ofelia.job-exec.laterbase-backup.container: "backup_agent"
      ofelia.job-exec.laterbase-backup.command: "/app/backup.sh" # Ofelia runs the dump script
    networks:
      - network

  # --- Duplicati Backup Service ---
  duplicati:
    image: duplicati/duplicati:latest # Use the official image
    container_name: laterbase_duplicati
    hostname: laterbase-duplicati # Set hostname for UI clarity
    env_file: # Pass .env for optional password
      - .env
    environment:
      - TZ=${TZ:-Etc/UTC} # Optional: Set timezone
      # Optional: Set password via DUPLICATI_WEBSERVICE_PASSWORD if needed in .env
      # Ensure the variable is present in .env if you uncomment this
      # DUPLICATI_WEBSERVICE_PASSWORD: ${DUPLICATI_WEBSERVICE_PASSWORD}
    volumes:
      # Mount volume for Duplicati configuration database and local state
      - duplicati_data:/data
      # Mount the shared backups directory (read-only for Duplicati)
      - ${LOCAL_BACKUP_PATH:-./backups}:/backups:ro
      # Optional: Mount source data if Duplicati needs to back up other things directly
      # - /path/on/host:/source
    ports:
      - "8201:8200" # Duplicati Web UI
    restart: unless-stopped
    networks:
      - network

  # --- pgAdmin UI Service ---
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: laterbase_pgadmin
    env_file:
      - .env # To get PGADMIN_EMAIL/PASSWORD
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-YOUR_PGADMIN_EMAIL_HERE}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-YOUR_PGADMIN_PASSWORD_HERE}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    volumes:
      - laterbase_pgadmin_data:/var/lib/pgadmin
    networks:
      - network
    restart: unless-stopped

  # --- Ofelia Scheduler Service ---
  scheduler:
    image: mcuadros/ofelia:latest
    container_name: laterbase_scheduler
    depends_on:
      - backup-agent # Ensure backup agent container exists for Ofelia to exec into
      # No explicit dependency on duplicati service needed for scheduler operation
    command: daemon --docker
    volumes:
      # Mount docker socket to allow Ofelia to interact with Docker daemon
      - /var/run/docker.sock:/var/run/docker.sock:ro # Read-only is safer
    networks:
      - network
    restart: unless-stopped

volumes:
  # Volume for standby PostgreSQL data
  laterbase_standby_data:
    driver: local
  # Volume for pgAdmin data
  laterbase_pgadmin_data:
    driver: local
  # Volume for Duplicati configuration and state
  duplicati_data:
    driver: local

networks:
  # Network for communication between services
  network:
    driver: bridge